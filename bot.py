
import logging
import os
import random
from aiogram import Bot, Dispatcher, executor, types
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
OWNER_USERNAME = os.getenv("OWNER_USERNAME", "@admin")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

MOTIVATION_LIST = [
    "üîã –ù–µ –∑–¥–∞–≤–∞–π—Å—è. –í–µ–ª–∏–∫—ñ —Å–ø—Ä–∞–≤–∏ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —á–∞—Å—É!",
    "üî• –ö–æ–∂–µ–Ω –¥–µ–Ω—å ‚Äî –Ω–æ–≤–∏–π —à–∞–Ω—Å!",
    "üí™ –£—Å–ø—ñ—Ö ‚Äî —Ü–µ 1% —Ç–∞–ª–∞–Ω—Ç—É —ñ 99% –Ω–∞–ø–æ–ª–µ–≥–ª–∏–≤–æ—Å—Ç—ñ.",
    "üöÄ –í—Å–µ –º–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ –ª–∏—à–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏!",
    "üß† –ù–∞–≤—ñ—Ç—å –Ω–∞–π–º–µ–Ω—à–∏–π –∫—Ä–æ–∫ ‚Äî —Ü–µ –∫—Ä–æ–∫ –≤–ø–µ—Ä–µ–¥.",
    "‚ú® –¢–∏ —Å–∏–ª—å–Ω—ñ—à–∏–π, –Ω—ñ–∂ –¥—É–º–∞—î—à."
]

@dp.message_handler(commands=['start', 'help'])
async def send_help(message: types.Message):
    help_text = ("""
        üõ† <b>G5 Helper Pro ‚Äî –∫–æ–º–∞–Ω–¥–∏:</b>
        /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–æ–º–∞–Ω–¥–∏
        /all [—Ç–µ–∫—Å—Ç] ‚Äî —Ç–µ–≥ —É—Å—ñ—Ö —É —á–∞—Ç—ñ + —Ç–µ–∫—Å—Ç
        /request ‚Äî —Ç–µ–≥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ + —Ç–æ–≥–æ, —Ö—Ç–æ –ø—Ä–æ—Å–∏—Ç—å
        /motivation ‚Äî –≤–∏–ø–∞–¥–∫–æ–≤–∞ –º–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–∞ —Ü–∏—Ç–∞—Ç–∞
    """)
    await message.reply(help_text, parse_mode="HTML")

@dp.message_handler(commands=['all'])
async def tag_all(message: types.Message):
    args = message.get_args()
    if not args:
        await message.reply ("""‚ùå –ö–æ–º–∞–Ω–¥–∞ /all –ø–æ—Ç—Ä–µ–±—É—î —Ç–µ–∫—Å—Ç—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
`/all –ó—É—Å—Ç—Ä—ñ—á –æ 20:00!`""", parse_mode="Markdown")
        return
    text = f"üîî –£–≤–∞–≥–∞ –≤—Å—ñ–º! {args}"
    await message.reply(text)

@dp.message_handler(commands=['request'])
async def request_check(message: types.Message):
    user_tag = message.from_user.username or message.from_user.first_name
    await message.reply(f"""üì¨ {OWNER_USERNAME}
üîî @{user_tag} –≤—ñ–¥–ø—Ä–∞–≤–∏–≤(-–ª–∞) pull request –Ω–∞ GitHub .""")

@dp.message_handler(commands=['motivation'])
async def send_motivation(message: types.Message):
    quote = random.choice(MOTIVATION_LIST)
    await message.reply(quote)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
